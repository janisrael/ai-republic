#!/usr/bin/env python3
"""
LoRA Training Script for sdfsdfddd
Generated by AI Refinement Dashboard - Fixed based on 2024 best practices
"""

import os
import json
import torch
import logging
from transformers import (
    AutoModelForCausalLM, 
    AutoTokenizer, 
    TrainingArguments, 
    Trainer,
    BitsAndBytesConfig,
    DataCollatorForLanguageModeling
)
from peft import LoraConfig, get_peft_model, prepare_model_for_kbit_training, TaskType
from datasets import load_dataset, Dataset
import numpy as np
import requests

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ProgressCallback(TrainerCallback):
    def __init__(self, job_id):
        self.job_id = job_id
        
    def on_step_end(self, args, state, control, **kwargs):
        if state.global_step % 5 == 0:  # Update every 5 steps
            try:
                progress = 0.2 + (state.global_step / state.max_steps) * 0.6
                requests.post(f'http://localhost:5000/api/training-jobs/{job_id}/progress', 
                            json={
                                'progress': progress,
                                'current_step': state.global_step,
                                'total_steps': state.max_steps,
                                'epoch': state.epoch,
                                'total_epochs': args.num_train_epochs,
                                'step_progress': f"{state.global_step}/{state.max_steps}"
                            }, timeout=1)
            except:
                pass  # Don't fail training if progress update fails

def main():
    try:
        logger.info("üöÄ Starting LoRA training for sdfsdfddd")
        
        # Job configuration
        job_id = 31
        
        # Model and data paths
        base_model = "Qwen/Qwen2.5-Coder-7B"
        train_data_path = "training_data/job_31/train.jsonl"
        val_data_path = "training_data/job_31/val.jsonl"
        output_dir = f"models/sdfsdfddd_lora"
        
        # Load model with 4-bit quantization (more memory efficient)
        logger.info("üì• Loading base model...")
        bnb_config = BitsAndBytesConfig(
            load_in_4bit=True,
            bnb_4bit_quant_type="nf4",
            bnb_4bit_compute_dtype=torch.bfloat16,
            bnb_4bit_use_double_quant=True,
        )
        
        model = AutoModelForCausalLM.from_pretrained(
            base_model,
            quantization_config=bnb_config,
            device_map="auto",
            trust_remote_code=True,
            torch_dtype=torch.bfloat16
        )
        
        tokenizer = AutoTokenizer.from_pretrained(base_model, trust_remote_code=True)
        
        # Add padding token if missing
        if tokenizer.pad_token is None:
            tokenizer.pad_token = tokenizer.eos_token
            tokenizer.pad_token_id = tokenizer.eos_token_id
        
        # Prepare model for k-bit training
        model = prepare_model_for_kbit_training(model)
        
        # LoRA configuration with better target modules
        lora_config = LoraConfig(
            r=8,
            lora_alpha=32,
            target_modules=["q_proj", "v_proj", "k_proj", "o_proj", "gate_proj", "up_proj", "down_proj", "lm_head"],
            lora_dropout=0.05,
            bias="none",
            task_type="CAUSAL_LM",
            inference_mode=False,
            init_lora_weights=True
        )
        
        # Apply LoRA
        model = get_peft_model(model, lora_config)
        model.print_trainable_parameters()
        
        # Load dataset
        logger.info("üìä Loading training data...")
        dataset = load_dataset(
            "json",
            data_files={
                "train": train_data_path,
                "validation": val_data_path
            },
            streaming=False
        )
        
        # Tokenize function with better formatting
        def tokenize_function(examples):
            # Create instruction format following Alpaca style
            texts = []
            for i in range(len(examples["instruction"])):
                instruction = examples["instruction"][i]
                input_text = examples["input"][i] if examples["input"][i] else ""
                output = examples["output"][i]
                
                # Use Alpaca format
                if input_text:
                    text = f"Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\n{instruction}\n\n### Input:\n{input_text}\n\n### Response:\n{output}"
                else:
                    text = f"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\n{instruction}\n\n### Response:\n{output}"
                
                texts.append(text)
            
            # Tokenize with proper settings
            tokenized = tokenizer(
                texts,
                truncation=True,
                padding="max_length",
                max_length=512,
                return_tensors="pt"
            )
            
            # Set labels same as input_ids for causal LM
            tokenized["labels"] = tokenized["input_ids"].clone()
            
            # Mask padding tokens in labels
            tokenized["labels"][tokenized["labels"] == tokenizer.pad_token_id] = -100
            
            return tokenized
        
        # Tokenize datasets with proper column removal
        train_dataset = dataset["train"].map(tokenize_function, batched=True, remove_columns=dataset["train"].column_names)
        val_dataset = dataset["validation"].map(tokenize_function, batched=True, remove_columns=dataset["validation"].column_names)
        
        # Training arguments with better settings
        training_args = TrainingArguments(
            output_dir=output_dir,
            per_device_train_batch_size=4,
            per_device_eval_batch_size=4,
            gradient_accumulation_steps=4,
            num_train_epochs=3,
            learning_rate=0.0002,
            warmup_ratio=0.1,
            weight_decay=0.01,
            fp16=True,
            logging_steps=10,
            eval_strategy="steps",
            eval_steps=50,
            save_steps=100,
            save_total_limit=3,
            load_best_model_at_end=True,
            metric_for_best_model="eval_loss",
            greater_is_better=False,
            report_to=None,  # Disable wandb/tensorboard
            remove_unused_columns=False,
            dataloader_pin_memory=False,
            optim="adamw_torch",
            lr_scheduler_type="cosine",
        )
        
        # Create trainer with progress callback
        trainer = Trainer(
            model=model,
            args=training_args,
            train_dataset=train_dataset,
            eval_dataset=val_dataset,
            tokenizer=tokenizer,
            callbacks=[ProgressCallback(31)]
        )
        
        # Start training with proper trainer
        logger.info("üèÉ Starting training...")
        
        # Train the model
        trainer.train()
        
        # Save model
        logger.info("üíæ Saving trained model...")
        trainer.save_model()
        tokenizer.save_pretrained(output_dir)
        
        # Save LoRA adapters separately
        model.save_pretrained(output_dir + "_adapters")
        
        logger.info("‚úÖ LoRA training completed successfully!")
        
        # Create Ollama model from LoRA adapters
        logger.info("üîÑ Creating Ollama model...")
        try:
            # Merge LoRA adapters with base model
            merged_model = model.merge_and_unload()
            merged_model.save_pretrained(output_dir + "_merged")
            
            # Create Ollama Modelfile
            modelfile_content = f"""FROM {base_model}

SYSTEM "You are a helpful AI assistant trained with LoRA fine-tuning. You provide accurate and helpful responses based on your training data."
"""
            
            modelfile_path = os.path.join(output_dir + "_merged", "Modelfile")
            with open(modelfile_path, 'w') as f:
                f.write(modelfile_content)
            
            logger.info("‚úÖ Ollama model creation prepared!")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not create Ollama model: {str(e)}")
        
    except Exception as e:
        logger.error(f"‚ùå Training failed: {str(e)}")
        raise e

if __name__ == "__main__":
    main()
