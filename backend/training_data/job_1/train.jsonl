{"instruction": "\nI am designing a JavaScript secure loader. The loader is inlined in the index.html. The goal of the secure loader is to only load JavaScript resources are trusted. The contents of index.html are mostly limited to the secure loader. For security purposes, I want index.html (as stored in cache) to never change, even if my website is hacked.\nHow can I cache index.html without the server being able to tamper with the cache? I am wondering if ServiceWorkers can help. Effectively, the index.html would register a service worker for fetching itself from an immutable cache (no network request is even made).\n", "input": "", "output": "\n\n\n\n\n\n\n\n            4\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                +100\n            \n\n\n\n\n\n\n\nin chrome you can use FileSystem API\nhttp://www.noupe.com/design/html5-filesystem-api-create-files-store-locally-using-javascript-webkit.html this allows you to then save and read files from a sand-boxed file-system though the browser.\nAs for other support it's not been confirmed as an addition to the HTML5 specification set yet. so it's only available in chrome.\nYou could also use the IndexDB system this is supported in all modern browsers.\nyou can use both these services inside a Service Worker to manage the loading and manage of the content however i have to question why would you want to you prevent your self from ever updating your index.html\n\n\n\n\n\n\n\n\nShare\n\n\nImprove this answer\n\n\n\n                        Follow\n                    \n\n\n\n\n\n\n\n\n\nedited Feb 15, 2017 at 20:48\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            answered Feb 9, 2017 at 0:56\n\n\n\n\n\n\nBarkermn01Barkermn01\n\n6,8193535 silver badges8484 bronze badges\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n1\n\n\n\n\nNote that the Filesystem API (formal title: File API: Directories and System) is obsolete and no other browsers have any plans to ever implement support for it. The specification itself has been demoted to a W3C \u201cNote\u201d with a warning in bold: Work on this document has been discontinued and it should not be referenced or used as a basis for implementation. So while it\u2019s fine to use for the case where somebody might only care about having something that works just in Chrome, they should not expect to see it working in any other browsers, ever.\n\n\u2013\u00a0sideshowbarker\n\u2666 \nFeb 12, 2017 at 3:04\n\n\n\n\n\n\n\n\n\n\n\n\n\nBTW this is why we don't trust W3C on HTML5 they standardised something that should not have been standardised updated on the 11th of January 2017, wicg.github.io/entries-api \" Other browsers (at this time: Microsoft Edge and Mozilla Firefox) are starting to support subsets of Chrome\u2019s APIs and behavior.\"\n\n\u2013\u00a0Barkermn01\n\nFeb 22, 2017 at 8:27\n\n\n\n\n\n\nAdd a comment\n\u00a0|\u00a0\n\n\n\n\n", "system": ""}
{"instruction": "I am not able to create a nodegroup with GPU type using EKS, getting this error from cloud formation:\n[!]  retryable error (Throttling: Rate exceeded status code: 400, request id: 1e091568-812c-45a5-860b-d0d028513d28) from cloudformation/DescribeStacks - will retry after delay of 988.442104msThis is my clusterconfig.yamlapiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n    name: CLUSTER_NAME\n    region: AWS_REGION\nnodeGroups:\n    - name: NODE_GROUP_NAME_GPU\n      ami: auto \n      minSize: MIN_SIZE\n      maxSize: MAX_SIZE\n      instancesDistribution:\n        instanceTypes: [\"g4dn.xlarge\", \"g4dn.2xlarge\"] \n        onDemandBaseCapacity: 0\n        onDemandPercentageAboveBaseCapacity: 0\n        spotInstancePools: 1\n      privateNetworking: true\n      securityGroups:\n        withShared: true\n        withLocal: true\n        attachIDs: [SECURITY_GROUPS]\n      iam:\n        instanceProfileARN: IAM_PROFILE_ARN\n        instanceRoleARN: IAM_ROLE_ARN\n      ssh:\n        allow: true\n        publicKeyPath: '----'\n      tags:\n        k8s.io/cluster-autoscaler/node-template/taint/dedicated: nvidia.com/gpu=true\n        k8s.io/cluster-autoscaler/node-template/label/nvidia.com/gpu: 'true'\n        k8s.io/cluster-autoscaler/enabled: 'true'\n      labels:\n        lifecycle: Ec2Spot\n        nvidia.com/gpu: 'true'\n        k8s.amazonaws.com/accelerator: nvidia-tesla\n      taints:\n        nvidia.com/gpu: \"true:NoSchedule\"", "input": "", "output": "the resolution was to install nividia plugins on the cluster so that the cluster will identify the gpu nodes", "system": ""}
{"instruction": "Basically whenever somebody raises a PR on my repository, I want to ensure that the person raising the PR has performed some actions (running a script etc.)So is there a way to set up some rule or some alert so as to remind the person to perform that action before raising the PR.", "input": "", "output": "You should use something calledintegration. Here you can see theGitHub Integrations Directory.My favorite isTravis CI\u2013you set it up using a.travis.ymlfile and thenafterthe commits are pushed the tests are run and Travis sends the status response which will be visible to in the Pull request.However, this can't stop the user to submit the pull request.Like I mentioned, you cannot stop the user to open pull requests but you can tell him/her the steps how to contribute using theCONTRIBUTING.mdin your project. Then when somebody opens a pull request or issue will see this alert:", "system": ""}
{"instruction": "We have been having the problem where we get errors of the format.Font from origin 'https://example.com' has been blocked from loading by\n  Cross-Origin Resource Sharing policy: No 'Access-Control-Allow-Origin'\n  header is present on the requested resource. Origin\n  'https://www.example.com' is therefore not allowed access.We also get a \"Redirect at origin\" error.We are using Drupal 7 and Cloudflare.we have attempted to edit .htaccess to includeHeader set Access-Control-Allow-Origin \"https://example.com\"\nHeader set Access-Control-Allow-Origin \"https://www.example.com\"Tried quite a lot;have purged cloudflarerestarted apachetried wildcard \"*\"Drupal CORS moduleSo far no joy.As this approach is not working, I am wondering if something is being missed or if there is an alternate approach, such as why we are getting origin 'https://example.com' being in the request via Drupal and not 'https://www.example.com'.Last note it that when I review some resources I see two distinct patterns.\nIf a resource has status of \"301 Moved Permanently\" in the request headers there isHost www.example.comRefererhttps://example.com/Where the status is \"304 Not Modified\"Host example.comRefererhttps://example.com/It's odd that there is any www at all; htaccess should be redirecting and it is absent from base_url.", "input": "", "output": "I have experienced a very similar issue.Be ensured that module headers is enabled1 - To enable mod headers on Apache2 (httpd) you need to run this command:sudo a2enmod headersThen restart Apachesudo service apache2 restart2 - To allow Access-Control-Allow-Origin (CORS) authorization for specific origin domains for all files, add this in your .htaccess<IfModule mod_headers.c>\n Header set Access-Control-Allow-Origin https://example.org\n Header set Access-Control-Allow-Origin https://example.com\n Header set Access-Control-Allow-Origin https://example.eu\n   ## SECURITY WARNING : never add following line when site is in production\n   ## Header set Access-Control-Allow-Origin \"*\"\n</IfModule>2 - To allow Access-Control-Allow-Origin (CORS) authorization for specific origin domains andfor fonts onlyin our example, use FilesMatch like in the following section in your .htaccess<FilesMatch \"\\.(ttf|otf|eot|woff|woff2)$\">\n  <IfModule mod_headers.c>\n    Header set Access-Control-Allow-Origin https://example.org\n    Header set Access-Control-Allow-Origin https://example.com\n    Header set Access-Control-Allow-Origin https://example.eu\n  </IfModule>\n</FilesMatch>After making changes in .htaccess file, no need to restart your apache webserver", "system": ""}
